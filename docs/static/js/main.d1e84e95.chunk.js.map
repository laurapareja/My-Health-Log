{"version":3,"sources":["components/HomePage.js","components/Button.js","components/TreatmentPage.js","components/Footer.js","components/TreatmentPageList.js","components/Appointments.js","components/MedicationCalculator/Header.js","components/MedicationCalculator/MedicationName.js","components/MedicationCalculator/MedicationColorSelector.js","components/MedicationCalculator/MedicationInstruction.js","components/MedicationCalculator/MedicationStartTiming.js","components/MedicationCalculator/ExampleGuideline.js","components/MedicationCalculator/MedicationCalculator.js","components/Navigator.js","components/App.js","serviceWorker.js","index.js"],"names":["HomePage","className","src","alt","Button","props","classButton","nameButton","TreatmentPage","classImage","image","titlePage","to","Footer","target","rel","href","TreatmentPageList","flareTreatment","map","month","day","index","dayList","treatment","dose","key","pill","time","date","getDate","monthIndex","getMonth","year","getFullYear","formatDate","Date","renderMonthName","Appointments","Header","MedicationName","htmlFor","type","id","placeholder","onChange","event","getInfoState","MedicationColorSelector","name","value","MedicationInstruction","MedicationStartTiming","ExampleGuideline","info","color","medicationName","undefined","App","state","dayHours","dayHoursMedication","firstDose","medicationInstruction","colorSelected","getDays","bind","getHoursMedication","this","dayHoursList","hour","push","setState","parseInt","doses","numberOfDoses","hoursNeed","listTimes","forEach","user","goodTime","infoState","currentTarget","timesMedication","React","Component","Navigator","samesite","getFlareTreatmentInfo","includeDayTreatmentToData","includeDataOrderedToState","fetch","then","response","json","data","propertiesOrdered","sort","a","b","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d1e84e95.chunk.js","sourcesContent":["import React from 'react';\nimport '../stylesheets/HomePage.scss'\n\nconst HomePage = () => {\n\n    return (\n        <div className=\"homeMain\">\n            <img src=\"https://laurapareja.github.io/My-Health-Log/images/wallpaper.png\" alt=\"homewallpaper\" className=\"homepage_img\"></img>\n        </div >\n    )\n}\n\nexport default HomePage;","import React from 'react';\n\nconst Button = (props) => {\n    const { classButton, nameButton } = props;\n    return (\n        <button className={`button ${classButton}`}>{nameButton}</button>\n    )\n}\n\nexport default Button;","import React from 'react';\nimport Button from './Button';\nimport { Link } from \"react-router-dom\";\n\n\n\nconst TreatmentPage = (props) => {\n    const { classImage, image, titlePage } = props;\n\n    return (\n        <div className=\"main\">\n            <img src={image} alt=\"pill\" className={classImage}></img>\n            <h2 className=\"main_title\">{titlePage}</h2>\n            <h3 className=\"main_subtitle\">Here you can register and see your flare-ups treatment</h3>\n            <div className=\"treatmentPage_button--container\">\n                <Link to=\"/My-Health-Log/treatmentList\">\n                    <Button nameButton=\"TREATMENT LIST\" classButton=\"treatmentPage_button\" />\n                </Link>\n                <Button nameButton=\"REGISTER\" classButton=\"treatmentPage_button\" />\n            </div>\n        </div >\n    )\n}\n\nexport default TreatmentPage;","import React from 'react';\nimport '../stylesheets/Footer.scss';\n\nconst Footer = () => {\n    return (\n        <footer className=\"footer\">\n            <p> &copy; 2019 / <a className=\"footer_link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/laurapareja/\">Laura Pareja</a>/ Licencia</p>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport Footer from './Footer';\nimport \"../stylesheets/TreatmentPage.scss\"\nimport Button from './Button';\nimport { Link } from \"react-router-dom\";\n\n\n\nconst renderMonthName = (flareTreatment) => {\n    return flareTreatment.map(month => {\n        const list = month.map((day, index) => {\n\n            const dayList = day.treatment.map((dose, index) => {\n                return (\n                    <div className=\"medication_dose--container\" key={index}>\n                        <div className={`pill ${dose.pill}`} ></div>\n                        <h4 className=\"doseTime\">{dose.time} </h4>\n                        <p className=\"pillName\">{dose.pill}</p>\n                    </div>\n                )\n            })\n            const formatDate = (date) => {\n                var monthNames = [\n                    \"January\", \"February\", \"March\",\n                    \"April\", \"May\", \"June\", \"July\",\n                    \"August\", \"September\", \"October\",\n                    \"November\", \"December\"\n                ];\n\n                var day = date.getDate();\n                var monthIndex = date.getMonth();\n                var year = date.getFullYear();\n\n                return day + ' ' + monthNames[monthIndex] + ' ' + year;\n            }\n            const date = formatDate(new Date(day.date))\n            return <div key={index} className=\"medication_dose--day\">\n                <p className=\"dateListItem\"> {date}</p>\n                {dayList}\n            </div>\n        })\n        return list\n    })\n}\n\n\n\nconst TreatmentPageList = (props) => {\n    const { flareTreatment, titlePage, image, classImage } = props\n    return (\n        <div className=\"main\" >\n            <img src={image} alt=\"pill\" className={`treatmentPageListImp ${classImage}`}></img>\n            <h2 className=\"main_title\">{titlePage}</h2>\n            <div>{renderMonthName(flareTreatment)}</div>\n            <Link to=\"/My-Health-Log/treatment\">\n                <Button nameButton=\"Back\" classButton=\"treatmentPage_button\" />\n            </Link>\n            <Footer />\n        </div>\n    )\n}\n\nexport default TreatmentPageList;","import React from 'react';\nimport \"../stylesheets/Appointments.scss\"\n\nconst Appointments = (props) => {\n    const { renderMonthName, classImage, image, titlePage } = props;\n\n    return (\n        <div className=\"main appointments\">\n            <h2 className=\"main_title\">{titlePage}</h2>\n            <img src={image} alt=\"appointment\" className={classImage}></img>\n            {renderMonthName}\n            <ul>\n                <li>Monday 21 October</li>\n                <li>Tuesday 22 October</li>\n                <li>Wednesday 23 October</li>\n                <li>Thursday 24 October</li>\n            </ul>\n        </div >\n    )\n}\n\nexport default Appointments;","import React from 'react';\n\nconst Header = () => {\n    return (\n        <header>\n            <h2 className=\"main_title\">Doses Calculator</h2>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst MedicationName = (props) => {\n    const handleChange = (event) => {\n        const medicationName = 'medicationName';\n        props.getInfoState(event, medicationName)\n    }\n    return (\n        <main className=\"medicationName\">\n            <label className=\"inputContent\" htmlFor=\"medicationName\">Medication Name</label>\n            <input type=\"text\" id=\"medicationName\" placeholder=\"Name\" onChange={handleChange}></input>\n        </main>\n    )\n}\n\nexport default MedicationName;","import React from 'react';\n\nconst MedicationColorSelector = (props) => {\n    const handleChange = (event) => {\n        const colorSelected = 'colorSelected';\n        props.getInfoState(event, colorSelected)\n    }\n    return (\n        <div className=\"inputContainer\">\n            <label className=\"inputContent\" htmlFor=\"medicationColor\">\n                Select a color\n            </label>\n            <select name=\"colors\" id=\"medicationColor\" onChange={handleChange}>\n                <option value=\"color\"></option>\n                <option value=\"blue\">blue</option>\n                <option value=\"yellow\">yellow</option>\n                <option value=\"orange\">orange</option>\n                <option value=\"purple\">purple</option>\n                <option value=\"green\">green</option>\n                <option value=\"red\">red</option>\n            </select>\n        </div>\n    )\n}\n\nexport default MedicationColorSelector;","import React from 'react';\n\nconst MedicationInstruction = (props) => {\n    const handleChange = (event) => {\n        const medicationInstruction = 'medicationInstruction';\n        props.getInfoState(event, medicationInstruction)\n    }\n    return (\n        <div className=\"inputContainer\">\n            <label htmlFor=\"medicationInstruction\" className=\"inputContent\">each</label>\n            <select name=\"guidelineDose\" id=\"guidelineDose\" onChange={handleChange}>\n                <option value=\"cantidad\"></option>\n                <option value=\"24\">24</option>\n                <option value=\"12\">12</option>\n                <option value=\"6\">6</option>\n                <option value=\"4\">4</option>\n                <option value=\"3\">3</option>\n            </select>\n            <label htmlFor=\"medicationInstruction\">    hours</label>\n        </div>\n    )\n}\n\nexport default MedicationInstruction;","import React from 'react';\n\n\n\nconst MedicationStartTiming = (props) => {\n\n\n    const handleChange = (event) => {\n        const firstDose = 'firstDose';\n        props.getInfoState(event, firstDose)\n    }\n\n    return (\n        <div className=\"inputContainer\" >\n            <label className=\"inputContent\" htmlFor=\"startTiming\">First Dose</label>\n            <select name=\"startTiming\" id=\"startTiming\" onChange={handleChange}>\n                <option value=\"hora\"></option>\n                <option value=\"8\">08:00</option>\n                <option value=\"9\">09:00</option>\n                <option value=\"10\">10:00</option>\n                <option value=\"11\">11:00</option>\n                <option value=\"12\">12:00</option>\n                <option value=\"13\">13:00</option>\n                <option value=\"14\">14:00</option>\n                <option value=\"15\">15:00</option>\n                <option value=\"16\">16:00</option>\n                <option value=\"17\">17:00</option>\n                <option value=\"18\">18:00</option>\n                <option value=\"19\">19:00</option>\n                <option value=\"20\">20:00</option>\n                <option value=\"21\">21:00</option>\n                <option value=\"22\">22:00</option>\n            </select>\n        </div>\n    )\n}\n\nexport default MedicationStartTiming;","import React from 'react';\n\nconst ExampleGuideline = (props) => {\n    const { info, color, medicationName } = props;\n    const renderName = (props) => {\n\n        if (info !== undefined) {\n            const name = info.map((time, index) => {\n                if (time < 10) {\n                    return (\n                        <div key={index} className=\"example__time--container\">\n                            <h4>0{time}:00 </h4>\n                            <div className={`hour ${color}`}></div>\n                            {medicationName}\n                        </div>\n                    )\n                } else {\n                    return (\n                        <div key={index} className=\"example__time--container\">\n                            <h4>{time}:00 </h4>\n                            <div className={`hour ${color}`}></div>\n                            {medicationName}\n                        </div>\n                    )\n                }\n            })\n            return name\n\n        } else if (info === undefined) {\n            return <div>No content</div>\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"example__container\">\n                {renderName()}\n            </div>\n        </div>\n    )\n}\n\nexport default ExampleGuideline;","import React from \"react\";\nimport Header from \"./Header\";\nimport MedicationName from \"./MedicationName\";\nimport MedicationColorSelector from \"./MedicationColorSelector\";\n// import MedicationQuantitySelector from \"./MedicationQuantitySelector\";\nimport MedicationInstruction from \"./MedicationInstruction\";\nimport MedicationStartTiming from \"./MedicationStartTiming\";\nimport ExampleGuideline from \"./ExampleGuideline\";\nimport \"../../stylesheets/MedicationCalculator.scss\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dayHours: [],\n      dayHoursMedication: [],\n      medicationName: \"\",\n      firstDose: '',\n      medicationInstruction: '',\n      colorSelected: \"\"\n    }\n    this.getDays = this.getDays.bind(this);\n    this.getHoursMedication = this.getHoursMedication.bind(this);\n    this.getInfoState = this.getInfoState.bind(this);\n\n  }\n  componentDidMount() {\n    this.getDays();\n  }\n\n  getDays() {\n    let dayHoursList = [];\n    for (let hour = 1; hour < 24; hour++) {\n      dayHoursList.push(hour);\n    }\n    return this.setState({\n      dayHours: dayHoursList\n    })\n  }\n  getHoursMedication() {\n\n    if (this.state.firstDose !== \"\" && this.state.medicationInstruction !== \"\") {\n      const firstDose = parseInt(this.state.firstDose);\n      const medicationInstruction = parseInt(this.state.medicationInstruction);\n      const doses = 24 / medicationInstruction;\n\n      let numberOfDoses = [];\n\n      for (let dose = 0; dose < doses; dose++) {\n        numberOfDoses.push(dose)\n      }\n\n      let hoursNeed = firstDose;\n      let listTimes = []\n\n      numberOfDoses.forEach((user) => {\n        if (user === 0) {\n          listTimes.push(hoursNeed)\n\n        } else {\n          const time = hoursNeed += medicationInstruction\n          if (time > 24) {\n            const goodTime = time - 24;\n            listTimes.push(goodTime)\n\n          } else {\n            listTimes.push(time)\n\n          }\n        }\n      })\n\n      return listTimes\n    }\n  }\n\n  getInfoState(event, infoState) {\n    this.setState({\n      [infoState]: event.currentTarget.value\n    })\n  }\n\n  render() {\n    const timesMedication = this.getHoursMedication()\n    return (\n      <div className=\"mainCalculator\">\n        <Header />\n        <div className=\"mainCalculator_content\">\n\n          <MedicationName getInfoState={this.getInfoState} />\n          <MedicationColorSelector getInfoState={this.getInfoState} />\n          {/* <MedicationQuantitySelector /> */}\n          <MedicationStartTiming getInfoState={this.getInfoState} />\n          <MedicationInstruction getInfoState={this.getInfoState} />\n\n          <ExampleGuideline\n            info={timesMedication}\n            color={this.state.colorSelected}\n            medicationName={this.state.medicationName}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport \"../stylesheets/Navigator.scss\"\n\nconst Navigator = () => {\n    return (\n        <div className=\"navigator\">\n            <Link className=\"navigator_link\" to=\"/My-Health-Log/\"><i className=\"fas fa-home icon\" samesite=\"none\"></i>\n                Home</Link>\n            <Link className=\"navigator_link\" to=\"/My-Health-Log/treatment\"><i className=\"fas fa-pills icon\" samesite=\"none\"></i>Treatment</Link>\n            <Link className=\"navigator_link\" to=\"/My-Health-Log/appointments\"><i className=\"fas fa-calendar-check icon\" samesite=\"none\"></i>Appointments</Link>\n            <Link className=\"navigator_link\" to=\"/My-Health-Log/calculator\"><i className=\"fas fa-clock icon\" samesite=\"none\"></i>Timer</Link>\n        </div>\n    )\n}\n\nexport default Navigator;","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport HomePage from './HomePage';\nimport TreatmentPage from \"./TreatmentPage\";\nimport TreatmentPageList from \"./TreatmentPageList\";\nimport Appointments from './Appointments';\nimport MedicationCalculator from './MedicationCalculator/MedicationCalculator';\nimport Navigator from './Navigator';\n\nimport \"../stylesheets/App.scss\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      flareTreatment: [],\n    }\n    this.getFlareTreatmentInfo = this.getFlareTreatmentInfo.bind(this);\n    this.includeDayTreatmentToData = this.includeDayTreatmentToData.bind(this);\n    this.includeDataOrderedToState = this.includeDataOrderedToState.bind(this);\n  }\n  componentDidMount() {\n    this.getFlareTreatmentInfo();\n  }\n\n  getFlareTreatmentInfo() {\n    fetch(\"https://laurapareja.github.io/My-Health-Log/services/info.json\")\n      // fetch(\"http://localhost:3000/services/info.json\")\n\n      .then(response => response.json())\n      .then(data => {\n        this.includeDayTreatmentToData(data);\n        this.includeDataOrderedToState(data);\n      })\n  }\n\n  includeDayTreatmentToData(data) {\n    data[0].treatment.push(\n      {\n        \"date\": \"2019-06-16\",\n        \"treatment\": [\n          {\n            \"time\": \"08:00\",\n            \"pill\": \"paracetamol\"\n          },\n          {\n            \"time\": \"12:45\",\n            \"pill\": \"ibuprofeno\"\n          }, {\n            \"time\": \"18:45\",\n            \"pill\": \"paracetamol\"\n          }\n        ]\n      }\n    )\n    return data;\n  }\n\n  includeDataOrderedToState(data) {\n    const monthOrdered = data.sort((a, b) => {\n      return new Date(b.name) - new Date(a.name)\n    });\n    const propertiesOrdered = monthOrdered.map(month => {\n      return month.treatment.sort((a, b) => { return new Date(b.date) - new Date(a.date) })\n    })\n\n    return this.setState({\n      flareTreatment: propertiesOrdered,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"body\">\n        <BrowserRouter>\n          <Route\n            exact\n            path=\"/My-Health-Log/\"\n            render={() => {\n              return <HomePage />;\n            }}\n          />\n          <Switch>\n            <Route\n              exact\n              path=\"/My-Health-Log/treatment\"\n              render={() => {\n                return <TreatmentPage\n                  titlePage=\"Treatment\"\n                  classImage=\"page_image\"\n                  image=\"https://laurapareja.github.io/My-Health-Log/images/pills.png\" />;\n              }}\n            />\n            <Route\n              exact\n              path=\"/My-Health-Log/treatmentList\"\n              render={() => {\n                return <TreatmentPageList\n                  flareTreatment={this.state.flareTreatment}\n                  titlePage=\"Treatment\"\n                  classImage=\"page_image\"\n                  image=\"https://laurapareja.github.io/My-Health-Log/images/pills.png\" />;\n              }}\n            />\n\n            <Route\n              exact\n              path=\"/My-Health-Log/appointments\"\n              render={() => {\n                return <Appointments\n                  titlePage=\"Appointments\"\n                  classImage=\"page_image\"\n                  image=\"https://laurapareja.github.io/My-Health-Log/images/doctorDates.png\" />;\n              }}\n            />\n            <Route\n              exact\n              path=\"/My-Health-Log/calculator\"\n              render={() => {\n                return <MedicationCalculator />;\n              }}\n            />\n          </Switch>\n          <Navigator />\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}