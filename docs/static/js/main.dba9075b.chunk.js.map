{"version":3,"sources":["components/TreatmentPage.js","components/HomePage.js","components/Appointments.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["TreatmentPage","props","renderMonthName","classImage","image","titlePage","className","src","alt","HomePage","Appointments","Footer","target","href","App","state","flareTreatment","getFlareTreatmentInfo","bind","includeObjectToData","this","fetch","then","response","json","data","treatment","push","sort","a","b","Date","name","map","month","item","time","propertiesOrdered","date","setState","day","dayList","dose","index","key","pill","console","log","exact","path","render","to","class","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dba9075b.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst TreatmentPage = (props) => {\n    const { renderMonthName, classImage, image, titlePage } = props;\n\n    return (\n        <div className=\"main\">\n            <h2 className=\"main_title\">{titlePage}</h2>\n            <img src={image} alt=\"pill\" className={classImage}></img>\n            <div>{renderMonthName}</div>\n        </div >\n    )\n}\n\nexport default TreatmentPage;","import React from 'react';\n\nconst HomePage = () => {\n    // const { renderMonthName, classImage, image, titlePage } = props;\n\n    return (\n        <div className=\"homeMain\">\n            {/* <h1 className=\"main_title\">Home</h1> */}\n            <img src=\"https://laurapareja.github.io/My-Health-Log/images/wallpaper.png\" alt=\"homewallpaper\" className=\"homepage_img\"></img>\n            {/* <img src={image} alt=\"pill\" className={classImage}></img>\n            {renderMonthName} */}\n        </div >\n\n    )\n}\n\nexport default HomePage;","import React from 'react';\n\n\nconst Appointments = (props) => {\n    const { renderMonthName, classImage, image, titlePage } = props;\n\n    return (\n        <div className=\"main appointments\">\n            <h2 className=\"main_title\">{titlePage}</h2>\n            <img src={image} alt=\"appointment\" className={classImage}></img>\n            {renderMonthName}\n            <ul>\n                <li>Monday 21 October</li>\n                <li>Tuesday 22 October</li>\n                <li>Wednesday 23 October</li>\n                <li>Thursday 24 October</li>\n\n            </ul>\n        </div >\n    )\n}\n\nexport default Appointments;","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <footer className=\"footer\">\n            <p> &copy; 2019 / <a className=\"footer_link\" target=\"_blank\" href=\"https://www.linkedin.com/in/laurapareja/\">Laura Pareja</a>/ Licencia</p>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'; import TreatmentPage from \"./TreatmentPage\";\n// import Header from \"./Header\";\nimport HomePage from './HomePage';\nimport Appointments from './Appointments'\nimport Footer from \"./Footer\";\nimport { Link } from \"react-router-dom\";\n\nimport \"../stylesheets/App.scss\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      flareTreatment: [],\n    }\n    this.getFlareTreatmentInfo = this.getFlareTreatmentInfo.bind(this);\n    this.includeObjectToData = this.includeObjectToData.bind(this);\n    this.renderMonthName = this.renderMonthName.bind(this);\n  }\n  componentDidMount() {\n    this.getFlareTreatmentInfo();\n\n  }\n\n  getFlareTreatmentInfo() {\n\n    fetch(\"https://laurapareja.github.io/My-Health-Log/services/info.json\")\n      .then(response => response.json())\n      .then(data => {\n        this.includeObjectToData(data);\n      })\n  }\n\n  includeObjectToData(data) {\n    data[0].treatment.push(\n      {\n        \"date\": \"2019-06-16\",\n        \"treatment\": [\n          {\n            \"time\": \"04:00\",\n            \"pill\": \"paracetamol\"\n          },\n          {\n            \"time\": \"10:45\",\n            \"pill\": \"ibuprofeno\"\n          }, {\n            \"time\": \"18:45\",\n            \"pill\": \"ibuprofeno\"\n          }\n        ]\n      }\n    )\n    const monthOrdered = data.sort((a, b) => {\n      return new Date(b.name) - new Date(a.name)\n    });\n    const treatmentOrdered = data.map(month => {\n      return month.treatment.map(item => {\n        const medicationList = item.treatment\n        return medicationList.sort((a, b) => { return new Date(b.time) - new Date(a.time) })\n      })\n    })\n    const propertiesOrdered = data.map(month => {\n      return month.treatment.sort((a, b) => { return new Date(b.date) - new Date(a.date) })\n    })\n\n    return this.setState({\n      flareTreatment: propertiesOrdered,\n    })\n  }\n\n\n  renderMonthName() {\n    return this.state.flareTreatment.map(month => {\n      const list = month.map(day => {\n\n        const dayList = day.treatment.map((dose, index) => {\n          return (\n            <div className=\"medication_dose--container\">\n              <h4 key={index}>{dose.time} </h4>\n              <p>{dose.pill}</p>\n            </div>\n          )\n        })\n        return <div className=\"medication_dose--day\">\n          ----- {day.date}-----\n          {dayList}\n        </div>\n      })\n      return list\n    })\n\n  }\n\n\n  render() {\n    console.log(this.state.flareTreatment)\n\n\n    return (\n      <div className=\"body\">\n        <BrowserRouter>\n          {/* < Header /> */}\n          <Route\n            exact\n            path=\"/My-Health-Log/\"\n            render={() => {\n              return <HomePage />;\n            }}\n          />\n          <Switch>\n            <Route\n              exact\n              path=\"/My-Health-Log/treatment\"\n              render={() => {\n                return <TreatmentPage renderMonthName={this.renderMonthName()} titlePage=\"Treatment\" classImage=\"pill_image\" image=\"https://laurapareja.github.io/My-Health-Log/images/pills.png\" />;\n              }}\n            />\n            <Route\n              exact\n              path=\"/My-Health-Log/appointments\"\n              render={() => {\n                return <Appointments titlePage=\"Appointments\" classImage=\"pill_image\" image=\"https://laurapareja.github.io/My-Health-Log/images/doctorDates.png\" />;\n              }}\n            />\n          </Switch>\n          < Footer />\n          <div className=\"navigator\">\n            <Link className=\"navigator_link\" to=\"/My-Health-Log/\"><i class=\"fas fa-home icon\"></i>\n              Home</Link>\n            <Link className=\"navigator_link\" to=\"/My-Health-Log/treatment\"><i class=\"fas fa-pills icon\"></i>Treatment</Link>\n            <Link className=\"navigator_link\" to=\"/My-Health-Log/appointments\"><i class=\"fas fa-calendar-check icon\"></i>Appointments</Link>\n          </div>\n\n        </BrowserRouter>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}