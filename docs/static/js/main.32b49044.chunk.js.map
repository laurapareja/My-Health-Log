{"version":3,"sources":["components/Header.js","components/MedicationName.js","components/MedicationColorSelector.js","components/MedicationQuantitySelector.js","components/MedicationInstruction.js","components/MedicationStartTiming.js","components/ExampleGuideline.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","MedicationName","props","className","htmlFor","type","id","placeholder","onChange","event","getInfoState","MedicationColorSelector","name","value","MedicationQuantitySelector","MedicationInstruction","MedicationStartTiming","ExampleGuideline","info","color","medicationName","undefined","map","time","index","key","Footer","App","state","dayHours","dayHoursMedication","firstDose","medicationInstruction","colorSelected","getDays","bind","getHoursMedication","this","dayHoursList","hour","push","setState","console","log","parseInt","doses","numberOfDoses","dose","hoursNeed","listTimes","forEach","user","goodTime","infoState","currentTarget","timesMedication","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32b49044.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <header>\n            <h2>Calculadora de tomas</h2>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst MedicationName = (props) => {\n    const handleChange = (event) => {\n        const medicationName = 'medicationName';\n        props.getInfoState(event, medicationName)\n    }\n    return (\n        <main className=\"medicationName\">\n            <label htmlFor=\"medicationName\">Nombre medicación</label>\n            <input type=\"text\" id=\"medicationName\" placeholder=\"Nombre\" onChange={handleChange}></input>\n        </main>\n    )\n}\n\nexport default MedicationName;","import React from 'react';\n\nconst MedicationColorSelector = (props) => {\n    const handleChange = (event) => {\n        const colorSelected = 'colorSelected';\n        props.getInfoState(event, colorSelected)\n    }\n    return (\n        <div>\n            <label htmlFor=\"medicationColor\">Selecciona etiqueta color</label>\n            <select name=\"colors\" id=\"medicationColor\" onChange={handleChange}>\n                <option value=\"color\">color</option>\n                <option value=\"blue\">azul</option>\n                <option value=\"yellow\">amarillo</option>\n                <option value=\"orange\">naranja</option>\n                <option value=\"purple\">morado</option>\n                <option value=\"green\">verde</option>\n                <option value=\"red\">rojo</option>\n            </select>\n        </div>\n    )\n}\n\nexport default MedicationColorSelector;","import React from 'react';\n\nconst MedicationQuantitySelector = () => {\n    return (\n        <div>\n            <label htmlFor=\"medicationQuantity\">Cantidad</label>\n            <select name=\"dose\" id=\"dose\">\n                <option value=\"1\">1</option>\n                <option value=\"2\">2</option>\n                <option value=\"3\">3</option>\n                <option value=\"4\">4</option>\n                <option value=\"5\">5</option>\n            </select>\n        </div>\n    )\n}\n\nexport default MedicationQuantitySelector;","import React from 'react';\n\nconst MedicationInstruction = (props) => {\n    const handleChange = (event) => {\n        const medicationInstruction = 'medicationInstruction';\n        props.getInfoState(event, medicationInstruction)\n    }\n    return (\n        <div>\n            <label htmlFor=\"medicationInstruction\">cada</label>\n            <select name=\"guidelineDose\" id=\"guidelineDose\" onChange={handleChange}>\n                <option value=\"cantidad\"></option>\n                <option value=\"24\">24</option>\n                <option value=\"12\">12</option>\n                <option value=\"6\">6</option>\n                <option value=\"4\">4</option>\n                <option value=\"3\">3</option>\n            </select>\n            <label htmlFor=\"medicationInstruction\">horas</label>\n        </div>\n    )\n}\n\nexport default MedicationInstruction;","import React from 'react';\n\n\n\nconst MedicationStartTiming = (props) => {\n\n\n    const handleChange = (event) => {\n        const firstDose = 'firstDose';\n        props.getInfoState(event, firstDose)\n    }\n\n    return (\n        <div>\n            <label htmlFor=\"startTiming\">¿A qué hora quieres empezar?</label>\n            <select name=\"startTiming\" id=\"startTiming\" onChange={handleChange}>\n                <option value=\"hora\">Hora</option>\n                <option value=\"8\">08:00</option>\n                <option value=\"9\">09:00</option>\n                <option value=\"10\">10:00</option>\n                <option value=\"11\">11:00</option>\n                <option value=\"12\">12:00</option>\n                <option value=\"13\">13:00</option>\n                <option value=\"14\">14:00</option>\n                <option value=\"15\">15:00</option>\n                <option value=\"16\">16:00</option>\n                <option value=\"17\">17:00</option>\n                <option value=\"18\">18:00</option>\n                <option value=\"19\">19:00</option>\n                <option value=\"20\">20:00</option>\n                <option value=\"21\">21:00</option>\n                <option value=\"22\">22:00</option>\n            </select>\n        </div>\n    )\n}\n\nexport default MedicationStartTiming;","import React from 'react';\n\nconst ExampleGuideline = (props) => {\n    const { info, color, medicationName } = props;\n    const renderName = (props) => {\n\n        if (info !== undefined) {\n            const name = info.map((time, index) => {\n                if (time < 10) {\n                    return (\n                        <div key={index} className=\"example__time--container\">\n                            <h4>0{time}:00 </h4>\n                            <div className={`hour ${color}`}></div>\n                            {medicationName}\n                        </div>\n                    )\n                } else {\n                    return (\n                        <div key={index} className=\"example__time--container\">\n                            <h4>{time}:00 </h4>\n                            <div className={`hour ${color}`}></div>\n                            {medicationName}\n                        </div>\n                    )\n                }\n            })\n            return name\n\n        } else if (info === undefined) {\n            return <div>No content</div>\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"example__container\">\n                {renderName()}\n            </div>\n        </div>\n    )\n}\n\nexport default ExampleGuideline;","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <footer className=\"footer\">\n            <p> &copy; 2019 / Laura Pareja / Licencia</p>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from \"react\";\nimport Header from \"./Header\";\nimport MedicationName from \"./MedicationName\";\nimport MedicationColorSelector from \"./MedicationColorSelector\";\nimport MedicationQuantitySelector from \"./MedicationQuantitySelector\";\nimport MedicationInstruction from \"./MedicationInstruction\";\nimport MedicationStartTiming from \"./MedicationStartTiming\";\n// import PreviewExample from \"./PreviewExample\";\nimport ExampleGuideline from \"./ExampleGuideline\";\nimport Footer from \"./Footer\";\nimport \"../stylesheets/App.scss\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dayHours: [],\n      dayHoursMedication: [],\n      medicationName: \"\",\n      firstDose: '',\n      medicationInstruction: '',\n      colorSelected: \"\"\n    }\n    this.getDays = this.getDays.bind(this);\n    this.getHoursMedication = this.getHoursMedication.bind(this);\n    this.getInfoState = this.getInfoState.bind(this);\n\n  }\n  componentDidMount() {\n    this.getDays();\n  }\n\n  getDays() {\n    let dayHoursList = [];\n    for (let hour = 1; hour < 24; hour++) {\n      dayHoursList.push(hour);\n    }\n    return this.setState({\n      dayHours: dayHoursList\n    })\n  }\n  getHoursMedication() {\n\n    if (this.state.firstDose !== \"\" && this.state.medicationInstruction !== \"\") {\n      console.log('sí tengo datos')\n\n      const firstDose = parseInt(this.state.firstDose);\n      const medicationInstruction = parseInt(this.state.medicationInstruction);\n      const doses = 24 / medicationInstruction;\n\n      let numberOfDoses = [];\n\n      for (let dose = 0; dose < doses; dose++) {\n        numberOfDoses.push(dose)\n      }\n\n      let hoursNeed = firstDose;\n      let listTimes = []\n\n      numberOfDoses.forEach((user) => {\n        if (user === 0) {\n          listTimes.push(hoursNeed)\n\n        } else {\n          const time = hoursNeed += medicationInstruction\n          if (time > 24) {\n            const goodTime = time - 24;\n            listTimes.push(goodTime)\n\n          } else {\n            listTimes.push(time)\n\n          }\n        }\n      })\n\n      return listTimes\n    }\n  }\n\n  getInfoState(event, infoState) {\n    this.setState({\n      [infoState]: event.currentTarget.value\n    })\n  }\n\n\n  render() {\n    const timesMedication = this.getHoursMedication()\n    return (\n      <div>\n        <div className=\"medicationCard\">\n          <Header />\n          <MedicationName getInfoState={this.getInfoState} />\n          <MedicationColorSelector getInfoState={this.getInfoState} />\n          <MedicationQuantitySelector />\n          <MedicationInstruction getInfoState={this.getInfoState} />\n          <MedicationStartTiming getInfoState={this.getInfoState} />\n          {/* <PreviewExample\n          color={this.state.colorSelected}\n          dayHours={this.state.dayHours}\n          medicationName={this.state.medicationName}\n          firstDose={this.state.firstDose} /> */}\n          <ExampleGuideline\n            info={timesMedication}\n            color={this.state.colorSelected}\n            medicationName={this.state.medicationName}\n          />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}