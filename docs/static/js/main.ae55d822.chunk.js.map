{"version":3,"sources":["components/HomePage.js","components/Button.js","components/TreatmentPage.js","components/Footer.js","components/TreatmentPageList.js","components/TreatmentRegister.js","components/AppointmentPage.js","components/AppointmentsList.js","components/MedicationCalculator/Header.js","components/MedicationCalculator/MedicationName.js","components/MedicationCalculator/MedicationColorSelector.js","components/MedicationCalculator/MedicationInstruction.js","components/MedicationCalculator/MedicationStartTiming.js","components/MedicationCalculator/ExampleGuideline.js","components/MedicationCalculator/MedicationCalculator.js","components/Navigator.js","components/App.js","serviceWorker.js","index.js"],"names":["HomePage","className","src","alt","Button","props","classButton","nameButton","actionButton","disabled","onClick","TreatmentPage","classImage","image","titlePage","to","Footer","target","rel","href","TreatmentPageList","flareTreatment","colorSelected","medicationName","sort","a","b","date","listDays","map","day","includes","push","dayItem","index","getDate","monthIndex","getMonth","year","getFullYear","formatDate","Date","key","treatment","time","pill","renderMonthName","TreatmentRegister","state","newMedication","buttonClickable","errorMessage","renderMedicationSelector","bind","handleNewMedication","regirterNewMedication","handleDeleteNewMedication","handleSaveMedication","handleClassButton","renderErrorMessage","actionSaveButton","medicationsTreatment","medication","name","value","event","currentTarget","this","setState","htmlFor","type","id","includeNewTreatment","onChange","React","Component","AppointmentPage","AppointmentsList","Header","MedicationName","placeholder","getInfoState","MedicationColorSelector","MedicationInstruction","medicationInstruction","MedicationStartTiming","firstDose","hours","i","hour","hourWithPad","ExampleGuideline","info","color","undefined","App","localStorageData","getData","_getInitialState","saveData","getDays","getHoursMedication","JSON","parse","localStorage","getItem","setItem","stringify","dayHours","dayHoursMedication","dayHoursList","parseInt","doses","numberOfDoses","dose","hoursNeed","listTimes","forEach","user","goodTime","infoState","timesMedication","actionColorSelector","Navigator","samesite","namePill","toLowerCase","newState","e","listMedication","newTreatment","listUpdated","console","log","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae55d822.chunk.js","sourcesContent":["import React from 'react';\nimport '../stylesheets/HomePage.scss'\n\nconst HomePage = () => {\n\n    return (\n        <div className=\"homeMain\">\n            <img src=\"https://laurapareja.github.io/My-Health-Log/images/wallpaper.png\" alt=\"homewallpaper\" className=\"homepage_img\"></img>\n        </div >\n    )\n}\n\nexport default HomePage;","import React from 'react';\n\nconst Button = (props) => {\n    const { classButton, nameButton, actionButton, disabled } = props;\n    return (\n        <button className={`button ${classButton}`} onClick={actionButton} disabled={disabled}>{nameButton}</button>\n    )\n}\n\nexport default Button;","import React from 'react';\nimport Button from './Button';\nimport { Link } from \"react-router-dom\";\n\n\n\nconst TreatmentPage = (props) => {\n    const { classImage, image, titlePage } = props;\n\n    return (\n        <div className=\"main\">\n            <img src={image} alt=\"pill\" className={classImage}></img>\n            <h2 className=\"main_title\">{titlePage}</h2>\n            <h3 className=\"main_subtitle\">Here you can register and see your flare-ups treatment</h3>\n            <div className=\"treatmentPage_button--container\">\n                <Link to=\"/My-Health-Log/treatmentList\">\n                    <Button nameButton=\"TREATMENT LIST\" classButton=\"treatmentPage_button\" />\n                </Link>\n                <Link to=\"/My-Health-Log/treatment/register\">\n                    <Button nameButton=\"REGISTER\" classButton=\"treatmentPage_button\" />\n                </Link>\n            </div>\n        </div >\n    )\n}\n\nexport default TreatmentPage;","import React from 'react';\nimport '../stylesheets/Footer.scss';\n\nconst Footer = () => {\n    return (\n        <footer className=\"footer\">\n            <p> &copy; 2019 / <a className=\"footer_link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/laurapareja/\">Laura Pareja</a>/ Licencia</p>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport Footer from './Footer';\nimport \"../stylesheets/TreatmentPage.scss\"\nimport Button from './Button';\nimport { Link } from \"react-router-dom\";\n\n\n\nconst renderMonthName = (flareTreatment, colorSelected, medicationName) => {\n\n    flareTreatment.sort(function (a, b) {\n        if (a.date < b.date) {\n            return 1;\n        }\n        if (a.date > b.date) {\n            return -1;\n        }\n        return 0;\n    });\n    const listDays = [];\n\n    flareTreatment.map(day => {\n        if (listDays.includes(day.date) === false) {\n            return listDays.push(day.date)\n        }\n    })\n\n    const list = flareTreatment.map((dayItem, index) => {\n\n        const formatDate = (date) => {\n            var monthNames = [\n                \"January\", \"February\", \"March\",\n                \"April\", \"May\", \"June\", \"July\",\n                \"August\", \"September\", \"October\",\n                \"November\", \"December\"\n            ];\n\n            var day = date.getDate();\n            var monthIndex = date.getMonth();\n            var year = date.getFullYear();\n\n            return day + ' ' + monthNames[monthIndex] + ' ' + year;\n        }\n        const date = formatDate(new Date(dayItem.date))\n        return (\n            <div className=\"medication_dose--container\" key={index}>                <h4 className=\"dateListItem\">{date}</h4>\n                <div className=\"pillContainer\">\n                    <h4 className=\"doseTime\">{dayItem.treatment[0].time} </h4>\n                    <div className=\"pill yellow\" ></div> <p className=\"pillName\">\n                        {dayItem.treatment[0].pill}\n                    </p>\n                </div>\n            </div>\n        )\n    })\n    return list\n}\n\n\n\nconst TreatmentPageList = (props) => {\n    const { flareTreatment, titlePage, image, classImage, colorSelected, medicationName } = props\n    return (\n        <div className=\"main\" >\n            <img src={image} alt=\"pill\" className={`treatmentPageListImp ${classImage}`}></img>\n            <h2 className=\"main_title\">{titlePage}</h2>\n            <div>{renderMonthName(flareTreatment, colorSelected, medicationName)}</div>\n            <Link to=\"/My-Health-Log/treatment\">\n                <Button nameButton=\"Back\" classButton=\"treatmentPage_button\" />\n            </Link>\n            <Footer />\n        </div>\n    )\n}\n\nexport default TreatmentPageList;\n","import React from 'react';\nimport Footer from './Footer';\nimport \"../stylesheets/TreatmentRegister.scss\"\nimport Button from './Button';\nimport { Link } from \"react-router-dom\";\n\n\nclass TreatmentRegister extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newMedication: false,\n            date: \"\",\n            time: \"\",\n            medicationName: \"\",\n            buttonClickable: true,\n            errorMessage: true,\n        }\n        this.renderMedicationSelector = this.renderMedicationSelector.bind(this);\n        this.handleNewMedication = this.handleNewMedication.bind(this);\n        this.regirterNewMedication = this.regirterNewMedication.bind(this);\n        this.handleDeleteNewMedication = this.handleDeleteNewMedication.bind(this);\n        this.handleSaveMedication = this.handleSaveMedication.bind(this);\n        this.handleClassButton = this.handleClassButton.bind(this);\n        this.renderErrorMessage = this.renderErrorMessage.bind(this);\n        this.actionSaveButton = this.actionSaveButton.bind(this);\n    }\n\n\n    renderMedicationSelector(medicationsTreatment) {\n        return medicationsTreatment.map((medication, index) => {\n            return <option key={index} name={medication} value={medication}>{medication}</option>\n        })\n    }\n    handleNewMedication(event) {\n        if (event.currentTarget.value === 'newMedication') {\n            return this.setState({\n                newMedication: true\n            })\n        }\n    }\n\n    regirterNewMedication() {\n        if (this.state.newMedication === true) {\n            return (\n                <div>\n                    <div className=\"inputMedicationTreatment_container \">\n                        <label htmlFor=\"medicationTreatment\" className=\"treatmentLabel\">Register new medication</label >\n                        <div className=\"inputContainerMedication\">\n\n                            <input type=\"text\" id=\"medicationTreatment\" className=\"inputTreatment\"></input>\n                            <i className=\"far fa-trash-alt iconInput iconInput_trash\" onClick={this.handleDeleteNewMedication}></i>\n                        </div>\n\n                    </div>\n                </div>)\n        }\n    }\n    handleSaveMedication(event) {\n        if (event.target.type === \"date\") {\n            this.setState({\n                date: event.target.value,\n            })\n        } else if (event.target.type === \"time\") {\n            this.setState({\n                time: event.target.value,\n            })\n        } else {\n            this.setState({\n                medicationName: event.target.value,\n                errorMessage: false,\n                buttonClickable: false\n            })\n        }\n    }\n\n    handleClassButton() {\n        if (this.state.date === \"\" || this.state.time === \"\" || this.state.medicationName === \"\") {\n            return \"treatmentRegister_button--disable\"\n        } else {\n            return \"treatmentRegister_button--able\"\n        }\n    }\n\n    renderErrorMessage() {\n        if (this.state.errorMessage === true) {\n            return <div>Please complete all options</div>\n        }\n    }\n\n    handleDeleteNewMedication() {\n        this.setState({\n            newMedication: false\n        })\n    }\n\n    actionSaveButton(includeNewTreatment, state) {\n        if (this.state.buttonClickable === false) {\n            return includeNewTreatment(state)\n        }\n    }\n\n    render() {\n        const {\n            props,\n        } = this;\n\n        const { image, classImage, medicationsTreatment, includeNewTreatment } = props\n\n\n\n        return (\n            <div className=\"main\" >\n                <img src={image} alt=\"pill\" className={`treatmentPageListImp ${classImage}`}></img>\n                <h2 className=\"main_title\">New Treatment</h2>\n                <form className=\"form\" onChange={this.handleSaveMedication}>\n                    <div className=\"inputDateTreatment_container\">\n                        <label htmlFor=\"dateTreatment\" className=\"treatmentLabel\">Date</label >\n                        <div className=\"inputContainer\">\n                            <i className=\"far fa-calendar-plus iconInput\"></i>\n                            <input type=\"date\" id=\"dateTreatment\" className=\"inputTreatment\" ></input>\n                        </div>\n                    </div>\n                    <div className=\"inputDateTreatment_container\">\n                        <label htmlFor=\"timeTreatment\" className=\"treatmentLabel\">Time</label>\n                        <div className=\"inputContainer\">\n                            <i className=\"far fa-clock iconInput\"></i>\n                            <input type=\"time\" id=\"timeTreatment\" className=\"inputTreatment inputTreatment_Time\" ></input>\n                        </div>\n                    </div>\n                    <div className=\"inputDateTreatment_container\">\n                        <label htmlFor=\"selectMedication\" className=\"treatmentLabel\">Medication</label>\n                        <div className=\"inputContainer\">\n                            <i className=\"fas fa-tablets iconInput\"></i>\n                            <select name=\"selectMedication\" id=\"selectMedication\" className=\"inputTreatment\" onChange={this.handleNewMedication} >\n                                <option name=\"\" value=\"\"></option>\n                                {this.renderMedicationSelector(medicationsTreatment)}\n                                <option name=\"newMedication\" value=\"newMedication\">new medication</option>\n                            </select>\n                        </div>\n                    </div>\n                    {this.regirterNewMedication()}\n                </form>\n\n                {this.renderErrorMessage()}\n                <Link to=\"/My-Health-Log/treatment\">\n                    <Button\n                        nameButton=\"Save\"\n                        classButton={this.handleClassButton()}\n                        actionButton={this.actionSaveButton(includeNewTreatment, this.state)}\n                        disabled={this.state.buttonClickable} />\n                </Link>\n\n                <Link to=\"/My-Health-Log/treatment\">\n                    <Button nameButton=\"Back\" classButton=\"treatmentPage_button\" />\n                </Link>\n                <Footer />\n            </div>\n        )\n    }\n}\n\nexport default TreatmentRegister;","import React from 'react';\nimport Button from './Button';\nimport { Link } from \"react-router-dom\";\n\n\n\nconst AppointmentPage = (props) => {\n    const { classImage, image, titlePage } = props;\n\n    return (\n        <div className=\"main\">\n            <img src={image} alt=\"pill\" className={classImage}></img>\n            <h2 className=\"main_title\">{titlePage}</h2>\n            <h3 className=\"main_subtitle\">Here you can register and see your doctor appointments</h3>\n            <div className=\"treatmentPage_button--container\">\n                <Link to=\"/My-Health-Log/appointmentsList\">\n                    <Button nameButton=\"APPOINTMENT LIST\" classButton=\"treatmentPage_button\" />\n                </Link>\n                <Button nameButton=\"REGISTER\" classButton=\"treatmentPage_button\" />\n            </div>\n        </div >\n    )\n}\n\nexport default AppointmentPage;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport Button from './Button';\nimport \"../stylesheets/Appointments.scss\"\n\nconst AppointmentsList = (props) => {\n    const { renderMonthName, classImage, image, titlePage } = props;\n\n    return (\n        <div className=\"main appointments\">\n            <img src={image} alt=\"appointment\" className={`treatmentPageListImp ${classImage}`}></img>\n            <h2 className=\"main_title\">{titlePage}</h2>\n            {renderMonthName}\n            <ul>\n                <li>Monday 21 October</li>\n                <li>Tuesday 22 October</li>\n                <li>Wednesday 23 October</li>\n                <li>Thursday 24 October</li>\n            </ul>\n            <Link to=\"/My-Health-Log/appointments\">\n                <Button nameButton=\"Back\" classButton={`treatmentPage_button buttonAppointment`} />\n            </Link>\n        </div >\n    )\n}\n\nexport default AppointmentsList;","import React from 'react';\n\nconst Header = () => {\n    return (\n        <header>\n            <h2 className=\"main_title\">Doses Calculator</h2>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst MedicationName = (props) => {\n    const { medicationName } = props;\n    const handleChange = (event) => {\n        const medicationName = 'medicationName';\n        props.getInfoState(event, medicationName)\n    }\n    return (\n        <main className=\"medicationName\">\n            <label className=\"inputContent\" htmlFor=\"medicationName\">Medication Name</label>\n            <input type=\"text\" id=\"medicationName\" placeholder=\"Name\" onChange={handleChange} value={medicationName}></input>\n        </main>\n    )\n}\n\nexport default MedicationName;","import React from 'react';\n\nconst MedicationColorSelector = (props) => {\n    const colorSelected = props.colorSelected;\n    const handleChange = (event) => {\n        const colorSelected = 'colorSelected';\n        props.getInfoState(event, colorSelected)\n    }\n    return (\n        <div className=\"inputContainer\">\n            <label className=\"inputContent\" htmlFor=\"medicationColor\">\n                Select a color\n            </label>\n            <select name=\"colors\" id=\"medicationColor\" onChange={handleChange} className={`${colorSelected} colorselector`} value={colorSelected}>\n                <option value=\"blue\" className=\"blue colorselector\"></option>\n                <option value=\"yellow\" className=\"yellow colorselector\" ></option>\n                <option value=\"orange\" className=\"orange colorselector\"></option>\n                <option value=\"purple\" className=\"purple colorselector\"></option>\n                <option value=\"green\" className=\"green colorselector\"></option>\n                <option value=\"red\" className=\"red colorselector\"></option>\n            </select>\n        </div>\n    )\n}\n\nexport default MedicationColorSelector;","import React from 'react';\n\nconst MedicationInstruction = (props) => {\n    const medicationInstruction = props.medicationInstruction;\n    const handleChange = (event) => {\n        const medicationInstruction = 'medicationInstruction';\n        props.getInfoState(event, medicationInstruction)\n    }\n    return (\n        <div className=\"inputContainer\">\n            <label htmlFor=\"medicationInstruction\" className=\"inputContent\">each</label>\n            <select name=\"guidelineDose\" id=\"guidelineDose\" onChange={handleChange} value={medicationInstruction}>\n                <option value=\"3\">3</option>\n                <option value=\"4\">4</option>\n                <option value=\"6\">6</option>\n                <option value=\"8\">8</option>\n                <option value=\"12\">12</option>\n                <option value=\"24\">24</option>\n            </select>\n            <label htmlFor=\"medicationInstruction\">    hours</label>\n        </div>\n    )\n}\n\nexport default MedicationInstruction;","import React from 'react';\n\n\n\nconst MedicationStartTiming = (props) => {\n    const firstDose = props.firstDose;\n\n    const handleChange = (event) => {\n        const firstDose = 'firstDose';\n        props.getInfoState(event, firstDose)\n    }\n\n    const hours = []\n    for (let i = 0; i <= 24; i++) {\n        hours.push(i)\n    }\n\n    return (\n        <div className=\"inputContainer\" >\n            <label className=\"inputContent\" htmlFor=\"startTiming\">First Dose</label>\n            <select name=\"startTiming\" id=\"startTiming\" onChange={handleChange} value={firstDose}>\n                {hours.map((hour, index) => {\n                    let hourWithPad = `${hour}`\n                    if (hour < 10) {\n                        hourWithPad = `0${hour}`\n                    }\n                    return (<option key={index} value={hour}>{hourWithPad}:00</option>)\n                })}\n            </select>\n        </div>\n    )\n}\n\nexport default MedicationStartTiming;","import React from 'react';\n\nconst ExampleGuideline = (props) => {\n    const { info, color, medicationName } = props;\n    const renderName = (props) => {\n\n        if (info !== undefined) {\n            const name = info.map((time, index) => {\n                if (time < 10) {\n                    return (\n                        <div key={index} className=\"example__time--container\">\n                            <h4>0{time}:00 </h4>\n                            <div className={`hour ${color}`}></div>\n                            {medicationName}\n                        </div>\n                    )\n                } else {\n                    return (\n                        <div key={index} className=\"example__time--container\">\n                            <h4>{time}:00 </h4>\n                            <div className={`hour ${color}`}></div>\n                            {medicationName}\n                        </div>\n                    )\n                }\n            })\n            return name\n\n        } else if (info === undefined) {\n            return <div>No content</div>\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"example__container\">\n                {renderName()}\n            </div>\n        </div>\n    )\n}\n\nexport default ExampleGuideline;","import React from \"react\";\nimport Header from \"./Header\";\nimport MedicationName from \"./MedicationName\";\nimport MedicationColorSelector from \"./MedicationColorSelector\";\n// import MedicationQuantitySelector from \"./MedicationQuantitySelector\";\nimport MedicationInstruction from \"./MedicationInstruction\";\nimport MedicationStartTiming from \"./MedicationStartTiming\";\nimport ExampleGuideline from \"./ExampleGuideline\";\nimport \"../../stylesheets/MedicationCalculator.scss\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const localStorageData = this.getData();\n    this.state = localStorageData === null\n      ? this._getInitialState()\n      : localStorageData;\n\n    this.saveData = this.saveData.bind(this);\n\n    this.getDays = this.getDays.bind(this);\n    this.getHoursMedication = this.getHoursMedication.bind(this);\n    this.getInfoState = this.getInfoState.bind(this);\n\n  }\n  componentDidMount() {\n    this.getDays();\n    this.saveData();\n\n  }\n  //obtengo los datos del localstorage\n  getData() {\n    return JSON.parse(localStorage.getItem(\"infoMedication\"));\n  }\n  //guardo los datos en el localstorage\n  saveData() {\n    localStorage.setItem(\"infoMedication\", JSON.stringify(this.state));\n  }\n\n\n  _getInitialState() {\n    return {\n      dayHours: [],\n      dayHoursMedication: [],\n      medicationName: \"\",\n      firstDose: '',\n      medicationInstruction: '',\n      colorSelected: \"\"\n    }\n  }\n\n  getDays() {\n    let dayHoursList = [];\n    for (let hour = 1; hour < 24; hour++) {\n      dayHoursList.push(hour);\n    }\n    return this.setState({\n      dayHours: dayHoursList\n    },\n      //guardo en localstorage\n      this.saveData\n    )\n  }\n  getHoursMedication() {\n\n    if (this.state.firstDose !== \"\" && this.state.medicationInstruction !== \"\") {\n      const firstDose = parseInt(this.state.firstDose);\n      const medicationInstruction = parseInt(this.state.medicationInstruction);\n      const doses = 24 / medicationInstruction;\n\n      let numberOfDoses = [];\n\n      for (let dose = 0; dose < doses; dose++) {\n        numberOfDoses.push(dose)\n      }\n\n      let hoursNeed = firstDose;\n      let listTimes = []\n\n      numberOfDoses.forEach((user) => {\n        if (user === 0) {\n          listTimes.push(hoursNeed)\n\n        } else {\n          const time = hoursNeed += medicationInstruction\n          if (time > 24) {\n            const goodTime = time - 24;\n            listTimes.push(goodTime)\n\n          } else {\n            listTimes.push(time)\n\n          }\n        }\n      })\n\n      return listTimes\n    }\n  }\n\n  getInfoState(event, infoState) {\n    this.setState({\n      [infoState]: event.currentTarget.value\n    },\n      //guardo en localstorage\n      this.saveData\n    )\n  }\n\n\n  render() {\n    const timesMedication = this.getHoursMedication()\n    const color = this.state.colorSelected;\n    const medicationName = this.state.medicationName;\n    this.props.actionColorSelector(color, medicationName);\n\n    return (\n      <div className=\"mainCalculator\">\n        <Header />\n        <div className=\"mainCalculator_content\">\n          <MedicationName getInfoState={this.getInfoState} medicationName={this.state.medicationName} />\n          <MedicationColorSelector getInfoState={this.getInfoState} colorSelected={this.state.colorSelected} />\n          {/* <MedicationQuantitySelector /> */}\n          <MedicationStartTiming getInfoState={this.getInfoState} firstDose={this.state.firstDose} />\n          <MedicationInstruction getInfoState={this.getInfoState} medicationInstruction={this.state.medicationInstruction} />\n\n          <ExampleGuideline\n            info={timesMedication}\n            color={this.state.colorSelected}\n            medicationName={this.state.medicationName}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport \"../stylesheets/Navigator.scss\"\n\nconst Navigator = () => {\n    return (\n        <div className=\"navigator\">\n            <Link className=\"navigator_link\" to=\"/My-Health-Log/\"><i className=\"fas fa-home icon\" samesite=\"none\"></i>\n                Home</Link>\n            <Link className=\"navigator_link\" to=\"/My-Health-Log/treatment\"><i className=\"fas fa-pills icon\" samesite=\"none\"></i>Treatment</Link>\n            <Link className=\"navigator_link\" to=\"/My-Health-Log/appointments\"><i className=\"fas fa-calendar-check icon\" samesite=\"none\"></i>Appointments</Link>\n            <Link className=\"navigator_link\" to=\"/My-Health-Log/calculator\"><i className=\"fas fa-clock icon\" samesite=\"none\"></i>Timer</Link>\n        </div>\n    )\n}\n\nexport default Navigator;","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport HomePage from './HomePage';\nimport TreatmentPage from \"./TreatmentPage\";\nimport TreatmentPageList from \"./TreatmentPageList\";\nimport TreatmentRegister from \"./TreatmentRegister\";\nimport AppointmentPage from './AppointmentPage';\nimport AppointmentsList from \"./AppointmentsList\";\nimport MedicationCalculator from './MedicationCalculator/MedicationCalculator';\nimport Navigator from './Navigator';\n\nimport \"../stylesheets/App.scss\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const localStorageData = this.getData();\n    this.state = localStorageData === null\n      ? this._getInitialState()\n      : localStorageData;\n\n    this.saveData = this.saveData.bind(this);\n    this.actionColorSelector = this.actionColorSelector.bind(this);\n    this.includeNewTreatment = this.includeNewTreatment.bind(this);\n  }\n  componentDidMount() {\n    this.getData();\n    this.saveData();\n  }\n  //obtengo los datos del localstorage\n  getData() {\n    return JSON.parse(localStorage.getItem(\"infoMyHealthRegister\"));\n  }\n  //guardo los datos en el localstorage\n  saveData() {\n    localStorage.setItem(\"infoMyHeinfoMyHealthRegister\", JSON.stringify(this.state));\n  }\n  _getInitialState() {\n    return {\n      flareTreatment: [],\n      colorSelected: '',\n      medicationName: [\"paracetamol\", \"ibuprofeno\"]\n    }\n  }\n\n  actionColorSelector(color, namePill) {\n    if (this.state.colorSelected !== color) {\n      this.setState({\n        colorSelected: color,\n      }, this.saveData\n      )\n    }\n    const pill = namePill.toLowerCase()\n    if (this.state.medicationName !== pill) {\n      this.setState({\n        medicationName: pill,\n      }, this.saveData\n      )\n    }\n  }\n  includeNewTreatment(newState) {\n    return (e) => {\n      const date = newState.date;\n      const time = newState.time;\n      const medicationName = newState.medicationName;\n\n      if (this.state.medicationName.includes(medicationName) === false) {\n        const listMedication = [...this.state.medicationName]\n        listMedication.push(medicationName)\n        return this.setState({\n          medicationName: listMedication\n        }, this.saveData\n        )\n      }\n\n      const newTreatment =\n      {\n        \"date\": date,\n        \"treatment\": [\n          {\n            \"time\": time,\n            \"pill\": medicationName\n          }\n        ]\n      }\n        ;\n      const listUpdated = [...this.state.flareTreatment]\n      listUpdated.push(newTreatment)\n\n      return this.setState({\n        flareTreatment: listUpdated\n      }, this.saveData\n      )\n    }\n  }\n  render() {\n    console.log(this.state)\n    return (\n      <div className=\"body\">\n        <BrowserRouter>\n          <Route\n            exact\n            path=\"/My-Health-Log/\"\n            render={() => {\n              return <HomePage />;\n            }}\n          />\n          <Switch>\n            <Route\n              exact\n              path=\"/My-Health-Log/treatment\"\n              render={() => {\n                return <TreatmentPage\n                  titlePage=\"Treatment\"\n                  classImage=\"page_image\"\n                  image=\"https://laurapareja.github.io/My-Health-Log/images/pills.png\" />;\n              }}\n            />\n            <Route\n              exact\n              path=\"/My-Health-Log/treatmentList\"\n              render={() => {\n                return <TreatmentPageList\n                  flareTreatment={this.state.flareTreatment}\n                  titlePage=\"Treatment\"\n                  classImage=\"page_image\"\n                  colorSelected={this.state.colorSelected}\n                  medicationName={this.state.medicationName}\n                  image=\"https://laurapareja.github.io/My-Health-Log/images/pills.png\" />;\n              }}\n            />\n            <Route\n              exact\n              path=\"/My-Health-Log/treatment/register\"\n              render={() => {\n                return <TreatmentRegister\n                  titlePage=\"Treatment\"\n                  classImage=\"page_image\"\n                  includeNewTreatment={this.includeNewTreatment}\n                  medicationsTreatment={this.state.medicationName}\n                  image=\"https://laurapareja.github.io/My-Health-Log/images/pills.png\" />;\n                ;\n              }}\n            />\n            <Route\n              exact\n              path=\"/My-Health-Log/appointments\"\n              render={() => {\n                return <AppointmentPage\n                  titlePage=\"Appointments\"\n                  classImage=\"page_image\"\n                  image=\"https://laurapareja.github.io/My-Health-Log/images/doctorDates.png\" />;\n              }}\n            />\n            <Route\n              exact\n              path=\"/My-Health-Log/appointmentsList\"\n              render={() => {\n                return <AppointmentsList\n                  titlePage=\"Appointments\"\n                  classImage=\"page_image\"\n                  image=\"https://laurapareja.github.io/My-Health-Log/images/doctorDates.png\" />;\n              }}\n            />\n            <Route\n              exact\n              path=\"/My-Health-Log/calculator\"\n              render={() => {\n                return <MedicationCalculator actionColorSelector={this.actionColorSelector} />;\n              }}\n            />\n          </Switch>\n          <Navigator />\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}